import logging

from dotenv import load_dotenv
import os

import telegram
from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, JobQueue

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
load_dotenv()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.name} triggered 'start' at "
          f"{update.message.chat.type} chat {update.message.chat.id}")

    reply_text = ''
    if update.message.chat.type == telegram.Chat.PRIVATE:
        reply_text = f"–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç {update.get_bot().name}!\n" \
                     f'–Ø –±–æ—Ç–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ê–ª–µ–∫—Å–∞—à–∫–æ–π –¥–ª—è –≥—Ä—É–ø–ø—ã "–ß–∞—Ç –∏–≥–Ω–æ—Ä—â–∏–∫–æ–≤ –∏ –≤–µ—á–Ω–æ –∑–∞–Ω—è—Ç–æ–≥–æ –í–ª–∞–¥–∞".\n' \
                     f'–Ø —Å–¥–µ–ª–∞–Ω —Å –ª—é–±–æ–≤—å—é, –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –º–Ω–µ —Ç–∞–∫ —Å–∫–∞–∑–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å ü§î'
    elif update.message.chat.type == telegram.Chat.GROUP or update.message.chat.type == telegram.Chat.SUPERGROUP:
        reply_text = f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç {update.get_bot().name}!\n" \
                     f'–Ø –±–æ—Ç–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ê–ª–µ–∫—Å–∞—à–∫–æ–π, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –º–µ–Ω—è –≤ ' \
                     f'"{update.message.chat.title.title()}" ü•∞'
    else:
        reply_text = f"–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç {update.get_bot().name}!\n" \
                     f'–ß—Ç–æ —è —Ç—É—Ç –¥–µ–ª–∞—é? ü§î'

    await update.message.reply_text(reply_text)


def help_back(update: Update) -> str:
    if hasattr(update, "effective_user"):
        user_name = update.effective_user.name
    else:
        user_name = update.from_user.name

    print(f"User {user_name} triggered 'help' at "
          f"{update.message.chat.type} chat {update.message.chat.id}")

    reply_text = ''

    if update.message.chat.type == telegram.Chat.PRIVATE:
        reply_text = f"–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç, —è –º–æ–≥—É –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n" \
                     f'–ù—É, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –Ω–æ –ø–∞–ø–∞ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —è —Ä–∞—Å—Ç—É... –≤—Ä–æ–¥–µ –∫–∞–∫.\n' \
                     f'–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è –º–æ–≥—É:'
    elif update.message.chat.type == telegram.Chat.GROUP or update.message.chat.type == telegram.Chat.SUPERGROUP:
        reply_text = f"–Ø —Ä–∞–¥ –±—ã—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–∏–∫–µ, –≤ –¥–æ–ª–≥—É –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å, —è –º–æ–≥—É –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n" \
                     f'–ù—É, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –Ω–æ –ø–∞–ø–∞ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —è —Ä–∞—Å—Ç—É... –≤—Ä–æ–¥–µ –∫–∞–∫.\n' \
                     f'–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è –º–æ–≥—É:'
    return reply_text


def join_data(d_type: str, data: str) -> str:
    return d_type + ', ' + data


def parse_data(data: str) -> list[str, str]:
    return data.split(', ', 1)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False):
    reply_text = help_back(update)

    keyboard = [
        [InlineKeyboardButton("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", callback_data=join_data('help', "morning"))],
        [InlineKeyboardButton("–° –î–Ω—é—Ö–æ–π!", callback_data=join_data('help', "b-day"))],
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=join_data('help', "end"))],
    ]
    if not edit:
        await update.message.reply_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.edit_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def inline_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    print(f"User {update.effective_user.name} triggered '{query.data}' at "
          f"{query.message.chat.type} chat {query.message.chat.id}")

    d_type, data = parse_data(query.data)

    keyboard = []
    reply_text = ''

    if d_type == 'help':
        if data == "morning":
            reply_text = f"<b><u>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ/–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏</u></b>\n" \
                         f'–Ø –º–æ–≥—É(—Å–º–æ–≥—É) –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ <i>"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"</i> –∏ <i>"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"</i>' \
                         f'–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –≠—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ' \
                         f'<u>"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"</u>, –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <u>"/options"</u> –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É!'
            keyboard = [
                [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=join_data('options', "morning"))],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=join_data('help', "help"))],
            ]


        elif data == 'b-day':
            reply_text = f"<b><u>–° –î–Ω—é—Ö–æ–π</u></b>\n" \
                         f'–Ø –º–æ–≥—É(—Å–º–æ–≥—É) –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ <i>"–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º ......"</i> ' \
                         f'–Ω–∞ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ' \
                         f'<u>"–° –î–Ω—é—Ö–æ–π"</u>, –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <u>"/options"</u> –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É!'
            keyboard = [
                [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=join_data('options', "b-day"))],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=join_data('help', "help"))],
            ]


        elif data == 'help':
            await help_command(query, context, edit=True)

        elif data == 'end':
            reply_text = f"–•–æ—Ä–æ—à–æ, –µ—â—ë –ø–æ–≥–æ–≤–æ—Ä–∏–º!\n" \
                         f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ <u>'/help'</u>"

    elif d_type == 'options':
        reply_text = f"–•–æ—Ä–æ—à–æ, –µ—â—ë –ø–æ–≥–æ–≤–æ—Ä–∏–º!\n" \
                     f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ <u>'/help'</u>"

    await query.edit_message_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"An error occurred at update {update}. Cause of error was {context.error}")

def main() -> None:
    application = Application.builder().token("5614824616:AAFTDG7Ls2ZeL4J-2GVgC1TGbSIJ5gePZbU").build()

    # Commands
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))

    # Keyboard
    application.add_handler(CallbackQueryHandler(inline_keyboard))

    # Error
    application.add_error_handler(error_handler)



    application.run_polling()


if __name__ == "__main__":
    main()
